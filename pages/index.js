import { useState, useEffect } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

import { normalizeAssessData } from '../utils/normalizeAssessData';

const data = [
  {
    name: 'Page A',
    uv: 4000,
    pv: 2400,
    amt: 2400,
  },
  {
    name: 'Page B',
    uv: 3000,
    pv: 1398,
    amt: 2210,
  },
  {
    name: 'Page C',
    uv: 2000,
    pv: 9800,
    amt: 2290,
  },
  {
    name: 'Page D',
    uv: 2780,
    pv: 3908,
    amt: 2000,
  },
  {
    name: 'Page E',
    uv: 1890,
    pv: 4800,
    amt: 2181,
  },
  {
    name: 'Page F',
    uv: 2390,
    pv: 3800,
    amt: 2500,
  },
  {
    name: 'Page G',
    uv: 3490,
    pv: 4300,
    amt: 2100,
  },
]; 


const Home = (props) => {
  console.log(props.assessData)
  return (
    <div className={styles.container}>
      <Head>
        <title>/assess</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          <a href="https://www.codat.io">Codat</a> /assess
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          {
            props.companiesData.results?.length >= 1
              ? props.companiesData.results.map(company => {
                return <a key={company.id} href={`https://app.codat.io/companies/${company.id}`} target="_blank" rel="noreferrer" className={styles.card}>
                  <h2>{company.name}</h2>
                  <p>{company.id}</p>
                </a>
              })
              : <div className={styles.card}>
                  <h2>No companies</h2>
                  <p>Head to the <a key={company.id} href="https://app.codat.io/companies" target="_blank" rel="noreferrer">Codat Portal</a> to add your first company</p>
                </div>
          }
        </div>

        <LineChart
          width={500}
          height={300}
          data={props.assessData.data}
          margin={{
            top: 5,
            right: 30,
            left: 20,
            bottom: 5,
          }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Legend />
          <Line type="monotone" dataKey={props.assessData.key} stroke="#8884d8" activeDot={{ r: 8 }} />
        </LineChart>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export async function getServerSideProps() {
  // Encode your API key
  const encodedKey = Buffer.from(process.env.CODAT_API_KEY).toString(
    "base64"
  );

  // Add auth to the headers
  const headers = {
    method: "GET",
    headers: {
      authorization: "Basic " + encodedKey,
      "Access-Control-Allow-Origin": "*",
    },
  }

  // Fetch data from external API
  const resCompanies = await fetch(`https://api.codat.io/companies?page=1&pageSize=50`, headers)
  const dataCompanies = await resCompanies.json()

  const resAssess = await fetch(`https://api.codat.io/data/companies/55cfde38-422e-4231-ab9e-224217c786c5/connections/6189ed85-b8da-48ca-9d7e-10ee1c6ec42f/assess/enhancedProfitAndLoss?reportDate=2022-05-31&periodLength=1&numberOfPeriods=12&includeDisplayNames=false`, headers)
  const dataAssess = await resAssess.json()

  // Pass data to the page via props
  return { props: { 
    companiesData: dataCompanies,
    assessData: normalizeAssessData(dataAssess),
  } }
}


export default Home;